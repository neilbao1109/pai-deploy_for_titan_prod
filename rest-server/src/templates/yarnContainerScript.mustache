#!/bin/bash

# Copyright (c) Microsoft Corporation
# All rights reserved.
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
# to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Entrypoint script for yarn container.

exec 13>/tmp/pai_yarncontainer_$CONTAINER_ID.log
BASH_XTRACEFD=13

function exit_handler()
{
  printf "%s %s\n" \
    "[ERROR]" "EXIT signal received in yarn container, exiting ..."
  set +x
  exec 13>&-
  hdfs dfs -put /tmp/pai_yarncontainer_$CONTAINER_ID.log \
    {{{ hdfsUri }}}/Container/{{{ jobData.userName }}}/{{{ jobData.jobName }}}/log/
  kill 0
}

set -x
trap exit_handler EXIT


docker_name="$FRAMEWORK_NAME-$CONTAINER_ID"
export PAI_DEFAULT_FS_URI={{{ hdfsUri }}}

mkdir -p "/tmp/pai-root/alive/$APP_ID"
while /bin/true; do
  touch "/tmp/pai-root/alive/$APP_ID/yarn_$CONTAINER_ID"
  sleep 20
  [ -f "/tmp/pai-root/alive/$APP_ID/docker_$CONTAINER_ID" ] && [ ! "$(docker ps | grep $docker_name)" ] && break
done &

gpu_id=''
nvidia_devices=''
{{# taskData.gpuNumber }}
nvidia_devices+='--device=/dev/nvidiactl --device=/dev/nvidia-uvm'
gpu_bitmap=$(perl -e 'printf "%b",'$CONTAINER_GPUS)
for (( i=0,j=$((${#gpu_bitmap}-1)); i<${#gpu_bitmap}; i++,j-- )); do
  if [ ${gpu_bitmap:$i:1} -gt 0 ]; then
    gpu_id+="$j,"
    nvidia_devices+=" --device=/dev/nvidia$j"
  fi
done
gpu_id=$(echo $gpu_id | sed "s/,$//g")
{{/ taskData.gpuNumber }}
printf "%s %s\n%s\n\n" "[INFO]" "GPU_ID" "$gpu_id"
printf "%s %s\n%s\n\n" "[INFO]" "NVIDIA_DEVICES" "$nvidia_devices"


{{# jobData.authFile }}
IFS=$'\r\n' GLOBIGNORE='*' \
  eval 'cred=($(hdfs dfs -cat {{{ jobData.authFile }}}))' \
  || { echo 'Read authFile failed' ; exit 1; }
docker login --username ${cred[1]} --password ${cred[2]} ${cred[0]} \
  || { echo 'Authorized failed' ; exit 1; }
{{/ jobData.authFile }}

docker pull {{{ jobData.image }}} \
  || { echo 'Can not pull Docker image' ; exit 1; }
docker run --name $docker_name \
  --rm \
  --tty \
  --privileged=false \
  --cap-add=SYS_ADMIN \
  --network=host \
  --cpus={{{ taskData.cpuNumber }}} \
  --memory={{{ taskData.memoryMB }}}m \
  --oom-kill-disable \
  $nvidia_devices \
  --device=/dev/fuse \
  --security-opt apparmor:unconfined \
  --volume /var/drivers/nvidia/current:/usr/local/nvidia:ro \
  --volume /tmp/pai-root/alive/$APP_ID:/alive \
  --label GPU_ID=$gpu_id \
  --label PAI_HOSTNAME="$(hostname)" \
  --label PAI_JOB_NAME={{{ jobData.jobName }}} \
  --label PAI_JOB_VC_NAME={{{ jobData.virtualCluster }}} \
  --label PAI_USER_NAME={{{ jobData.userName }}} \
  --label PAI_CURRENT_TASK_ROLE_NAME={{{ taskData.name }}} \
  --env APP_ID=$APP_ID \
  --env FRAMEWORK_NAME=$FRAMEWORK_NAME \
  --env HADOOP_USER_NAME=$HADOOP_USER_NAME \
  --env PAI_TASK_INDEX=$TASK_INDEX \
  --env PAI_CONTAINER_HOST_IP=$CONTAINER_IP \
  --env PAI_CONTAINER_HOST_PORT_LIST=$CONTAINER_PORTS \
  --env PAI_CONTAINER_ID=$CONTAINER_ID \
  --entrypoint '/bin/bash' {{{ jobData.image }}} \
  '-c' 'hdfs dfs -get {{{ hdfsUri }}}/Container/$HADOOP_USER_NAME/$FRAMEWORK_NAME/DockerContainerScripts/{{{ idx }}}.sh bootstrap.sh && /bin/bash bootstrap.sh' \
  || exit 1
